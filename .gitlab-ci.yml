variables:
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_NAME: $POSTGRES_NAME
  POSTGRES_ROOT_PASSWORD: $POSTGRES_ROOT_PASSWORD
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD

stages:
  - build
  - test
  - push
  - deploy

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

after_script:
  - docker logout $CI_REGISTRY || true

build-image:
  stage: build
  tags: 
    - bare
  script:
    - env
    - docker build -t git.lnmo.ru/lcme/achievements:latest .
    # -t git.lnmo.ru/lcme/achievements:${VERSION_TAG}  .

test-image:
  stage: test
  tags:
    - bare
  script:
    - docker run git.lnmo.ru/lcme/achievements:latest /bin/sh -c "cd achievements && python manage.py test && python manage.py check" || true

push-image:
  stage: push
  tags:
    - bare
  script:
    - docker push git.lnmo.ru/lcme/achievements:latest || true
    # - docker push git.lnmo.ru/lcme/achievements:${VERSION_TAG}

deploy-2-production:
  stage: deploy
  tags:
    - bare
  script:
    - docker-compose down || true
    - docker-compose up -d
  environment:
    name: production
    url: https://results.lnmo.ru
    on_stop: stop-deploy-2-production
  when: manual

make-default-admin-production:
  stage: deploy
  tags:
    - bare
  script:
    - docker exec achievements_web_1 /code/make_default_admin.sh
  when: manual

make-backup-production:
  stage: deploy
  tags:
    - bare
  script:
      - mkdir -p /docker/achievements/backups/db
      - docker exec -it achievements_postgres_1 pg_dump "$POSTGRES_DB" > /docker/achievements/backups/db/$(date +%Y-%m-%d_%H-%M-%S).sql
  when: manual

stop-deploy-2-production:
  stage: deploy
  script:
    - docker-compose down
  when: manual
  environment:
    name: production
    action: stop